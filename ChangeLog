2005-04-05  Lennart Staflin  <lenst@lysator.liu.se>

	* test-idllexer.lisp ("IDL Lexer"): new fixed point literals

	* test-idlcomp.lisp ("idlcomp"): fixed point constant and fixed
	point constant arithmetic

	* clorb-idlparser.lisp (<const_dcl>): accept "const fixed" with
	fixed literal made by make-idl-fixed and friends.
	(<const_type>): new list of allowed types
	(add, sub): handle fixed point arithmetic
	(<number_literal>): added fixed point

	* clorb-idllexer.lisp (idl-fixed-p): new func
	(idl-fixed-values): new func
	(make-idl-fixed): new func
	(parse-fixed): return fixed repr made make make-idl-fixed

2005-03-25  Lennart Staflin  <lenst@lysator.liu.se>

	* test-typecode.lisp ("Typecodes"): added testcases for checking
	parameters to typecode creation functions

	* clorb-orb.lisp (check-tc-id, check-tc-name)
	(check-tc-member-names, check-tc-content-type): new functions
	for checking parameters to typecode creation functions
	
2005-03-23  Lennart Staflin  <lenst@lysator.liu.se>

	* examples/hello/idl.lisp: avoid logical pathnames

	* clorb-sysdep.lisp (accept-connection-on-socket): fix bug when
	called non blocking on sbcl

	* clorb-request.lisp (client-request): added 'args' slot
	(request-start-request): simplified interface
	(do-static-call): added args parameter
	(request-send): new request-start-request interface
	(request-poll): new func
	(request-wait-response): call request-poll
	(request-get-response): move forward handling to request-poll
	(compute-static-call, compute-static-set): use args parameter to
	do-static-call
	(poll_response): call request-poll

	* clorb-iiop.lisp (locate): new request-start-request interface

2005-03-11  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-idlparser.lisp (<literal>): only <number_literal> for all
	the numeric literals
	(<identifier>): handle _ escaped identifiers

	* clorb-idllexer.lisp (hex-char-p, hex-char, hex-escape)
	(oct-char, oct-escape, escaped-char, string-literal-1): new functions
	(string-literal): parse escaped characters and adjacent strings
	(char-literal): parse excaped character
	(decimal-char-p, parse-fixed): new funcs
	(number-token): parse octal, hex and fixed. make all floats
	double-float

2005-02-28  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-idlparser.lisp (<identifier>): better error reporting,
	allow leading underscore and remove it from result.

	* test-idlcomp.lisp ("idlcomp"): new test "escaping identifiers"

2005-02-25  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-poa.lisp (PortableServer:POA): new slot executing-requests
	(deletef): new macro
	(poa-invoke): track executing requests in executing-requests slot

2005-02-10  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-ifr.lisp (describe-contained): new method for constant-def

2005-02-03  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-value.lisp (value_box-typecode): sharing alias-typecode
	gives wrong result for compute-marshal-function.

	* clorb-macros2.lisp (define-interface): added defined_in version
	keyword arguments. And use set-ifr-info.

2005-02-01  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-pkgdcl.lisp ("OMG.ORG/IOP"): new exported symbols due to
	constants added to the package

2005-01-31  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-iop.lisp: added some ComponentID constants

	* clorb-typecode-1.lisp (set-ifr-description, ifr-description):
	change name of property from ifr-desc to ifr-description

2005-01-03  Lennart Staflin  <lenst@lysator.liu.se>

	* test-poa.lisp (define-test "Identity mapping"): new test

	* clorb-poa.lisp (reference_to_id): fix use of obsolete function

2004-12-27  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-files.lisp (*server-files*): new file clorb-queue

2004-12-20  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-srv.lisp (poa-request-handler): use
	connection-add-server-request 
	(send-response): use connection-remove-server-request

	* clorb-ifr.lisp (op:destroy): defined for IRObject, Contained,
	Container, Repository, Alias-def and Primitive-def.
	(op:describe_contents): defined for container

	* clorb-conn.lisp (connection-add-server-request): new func
	(connection-remove-server-request): new func

2004-11-26  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-idl.lisp (corba:idl): added new keyword parameter
	REPOSITORY, allows caller to populate existing repository.

2004-09-17  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-poa.lisp: use new object-map class for Active Object Map
	in POA. Updated all uses.

	* clorb-files.lisp (*server-files*): new file: clorb-aom

2004-09-16  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-objkey.lisp (to-object-id): new method for general sequence

	* test-poa.lisp: new test cases

	* clorb-srv.lisp (poa-cancelrequest-handler): set :canceled state
	on requests

	* clorb-poa.lisp (wait-for-completion): new place holder GF
	(PORTABLESERVER:POAMANAGER): new slot, managed-poas, tracks the
	POAs managed by the POAManager
	(in-invocation-context): new func
	(poamanager-new-state): also handle wait-for-completion and
	etheralize-objects 
	(add-poa): new GF
	(remove-poa): new GF
	(start-etheralize): new func

	* support-test.lisp (make-test-connection): new func
	(setup-test-out): use new func
	(setup-test-in): new func
	(test-write-request): new func

	* clorb-iiop.lisp: cleaning up some define-struct

2004-06-09  Lennart Staflin  <lenst@lysator.liu.se>

	* luna/package.lisp: new exports

	* support-test.lisp: (ensure-exception): moved to luna/testsuite.lisp

	* luna/testsuite.lisp (ensure-values, ensure-exception): new macros

	* test-poa.lisp ("POA Test"): fix

	* test-orb.lisp ("Test ORB Pseudo object"): new orb-work interface

	* test-client-request.lisp ("Client Request"): new orb-work interface

	* devel.lisp (*the-orb*): init orb with port on CMUCL

	* clorb-typecode-2.lisp (marshal-function-cache): create a
	cache cell from a typecode.
	(%jit-marshal): use marshal-function-cache

	* clorb-typecode-1.lisp (old-with-cache-slot): renamed with-cache-slot

	* clorb-target.lisp (target-code-contained): cleanup
	(target-code): dispatch on container using GF
	target-code-contained
	(target-code-contained): method for servant operation, raises
	CORBA:NO_IMPLEMENT.

	* clorb-sysdep.lisp (passive-socket-port): shouldn't be called
	with a null socket.
	(socket-stream-closed-p): allow a null stream in some cases.
	(cpp-command-string): moved here, added handling of preprocessor
	defines.	

	* clorb-supp.lisp (*the-orb*): moved

	* clorb-srv.lisp (poa-request-handler): track server-requests
	from connection (being processed).
	(send-response): track server-requests
	(poa-cancelrequest-handler): preliminary implementation of cancel
	request, don't send response for canceled requests.
	(poa-locaterequest-handler): use send-locate-reply
	(send-reply): new func
	(send-locate-reply): new func

	* clorb-servant.lisp (create-server-request): include orb
	(server-request-respond): check for internal _locate request.

	* clorb-request.lisp (request-start-request): take handler
	function as parameter
	(*call-hook*): new variable
	(do-static-call): after request sent, call *call-hook* if set,
	else normal response handling
	(request-send): new request-start-request interface
	(dii-output-func): use jit-marshal

	* clorb-poa.lisp (poa-invoke): refactoring

	* clorb-pkgdcl.lisp ("OMG.ORG/CORBA"): updated

	* clorb-orb.lisp (clorb-orb): added work-queue slot
	(enqueu-work): new work queue interface
	(work_pending): new interface to io layer
	(perform_work): new orb-work interface
	(run): new orb-work interface

	* clorb-options.lisp (*clorb-pathname-defaults*): need a read
	time eval for the *compile-file-pathname* reference.

	* clorb-objkey.lisp: cleanup

	* clorb-macros.lisp (with-cache-slot): moved and simplified

	* clorb-io.lisp (io-event-waiting-p, io-get-event): new event
	queue interface.

	* clorb-iiop.lisp (locate): use request-start-request

	* clorb-ifr-export.lisp (local-translator, remote-translator):
	use with-cache-slot macro. 

	* clorb-idlparser.lisp (load-repository): support for defines
	(*default-idl-compiler*): default compiler defines preprocessor
	symbol _CLORB.

	* clorb-idllexer.lisp (using-idllex): support for defines

	* clorb-idlcpp.lisp (*warn-unknown-pragma*): new flag, if true
	warn about unknown pragmas from cpp.
	(parse-cpp-line): use *warn-unknown-pragma* and recognize but
	ignore GCC pragma.
	(using-cpp-stream): support for defines

	* clorb-idl.lisp (IDL-COMPILER): support for defines
	(*default-exclude*): added modules IOP, GIOP and IIOP

	* clorb-files.lisp (*base-files*): added clorb-misc file.

	* clorb-conn.lisp (Connection): added server-request slot.
	(orb-work): added work queue in the ORB object. Use new io-driver
	interface. 
	(orb-wait): use new orb-work interface.

	* clorb-buffer.lisp (the-orb): moved.

2004-02-10  Lennart Staflin  <lenst@lysator.liu.se>

	* Version 0.5 Released

2003-10-23  Lennart Staflin  <lenst@lysator.liu.se>

	* Version 0.4 Released

2003-10-15  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-ifr.lisp (describe-contained): produce a
	CORBA:InterfaceDescription not a full description.
	(check-unique-name): new func.
	(setf op:base_interfaces): use check-unique-name
	(create_attribute): use check-unique-name
	(create_operation): use check-unique-name

2003-10-08  Lennart Staflin  <lenst@lysator.liu.se>

	* support-test.lisp (ensure-exception): added

	* idef-read.lisp:
	don't create the same interface multiple times, even if it is
	multiple times in the idef

	* clorb-target.lisp (target-type): ValueBase primitive

	* clorb-orb.lisp (OMG.ORG/CORBA:VALUEMODIFIER): new type
	(simple-value-members): factor of create_value_tc

	* clorb-opdef.lisp: removed unused functions

	* clorb-object.lisp (CORBA::ValueBase): new class
	(CORBA::AbstractBase): new class
	(_is_equivalent, _is_nil, _hash, _is_a): defined on class t. To
	handle local objects.

2003-10-07  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-macros.lisp (define-operation): added documentation key
	parameter.

	* clorb-typecode.lisp: Added constants for ValueModifier and
	TC_ValueBase
	
	* clorb-ifr.lisp: Implemented ValueDef, AbstraceInterfaceDef,
	LocalInterfaceDef and NativeDef.

1999-11-30  Lennart Staflin <lenst@lysator.liu.se>

	* clorb-orb.lisp: Added support for -ORBPort init argument to
	ORB_init.

	* clorb-iiop.lisp (unmarshal-giop-header): cleanup error message

	* clorb-io.lisp (io-driver): added cludge to work-around the
	buffering in sbcl streams.

2003-09-25  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-util.lisp (repository-facade): Creating a
	repository-facade class, that can aggregate several interface
	repositories. Currently this only implements the op:lookup_id
	method. 
	(*internal-interface-repository*): containing an instance of
	repository-facade. This should provide a way to search various
	local interface repositories, like the idef repository and those
	created by loading idl files.
	(get-ns): cache the narrowing, and try narrowing to CosNamingExt
	first.

	* clorb-poa.lisp (_get_interface): use new
	*internal-interface-repository*

	* clorb-pkgdcl.lisp ("NET.CDDR.CLORB"): changed name, keeping old
	name as nickname. New use list, with some conditional on clorb-dev.

	* clorb-options.lisp (*clorb-pathname-defaults*): added.
	Previously was in clorb-files.lisp, but that file is now in
	another package.

	* clorb-object.lisp (object-narrow): optionally allow narrowing
	to fail silently, returning nil.

	* clorb-iiop.lisp (+message-types+): changed from constant to
	defparameter. (the reader will create a new object every time. so
	it cant be constant :)

	* clorb-idl.lisp (corba:idl): add repository to
	*internal-interface-repository*.

	* clorb-files.lisp: Put file in separate package net.cddr.clorb.system
	Split out test related files, allowing loading LUNA (test framwork)
	package before declaring main clorb package.

	* clacl.lisp, clmcl.lisp, clopenmcl.lisp, clsbcl.lisp, test-util.lisp, examples/combat-account/account.lisp, examples/hello/loadup.lisp, luna/package.lisp:
	*** empty log message ***

	* clive.lisp, examples/dsi/clive.lisp: moved file

2003-09-23  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-marshal.lisp (marshal-float, marshal-double,
	marshal-longdouble): new funcs

	* clorb-sysdep.lisp, clsbcl.lisp: support sbcl on mac os x

2003-08-13  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-util.lisp (pathname-url): handle logical pathnames and
	pathnames without type

	* clorb-object.lisp (print-object): use proxy-id

2002-06-25  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-basetypes.lisp (corba:exception): moved
	(corba:userexception): moved

2002-05-30  Lennart Staflin  <lenst@lysator.liu.se>

	* orb-structs.lisp, orb-stub.lisp, orb-idl.lisp, code-gen.lisp:
	* ir-class.lisp, orb-export.lisp:
	removing

	* clorb-iir.lisp: simplify

	* clorb-exceptions.lisp, clorb-iiop.lisp, clorb-object.lisp:
	Exception handling

	* idef-read.lisp: use CORBA:StructMember instead of make-struct

	* clorb-unmarshal.lisp: added fun unmarshal-exception

2002-05-29  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-servant.lisp: Move op:_this to clorb-poa

2002-05-28  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-poa.lisp (_this): moved here from clorb-servant.lisp
	(poa-has-policy): new fun. change to use this

2002-05-24  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-opdef.lisp:
	Moved ParameterDescription, ParameterMode to clorb-ifr-base.

	* target.lisp:
	Dispatch on the CORBA: classes, not on the local-ifr classes.

	* local-ir.lisp:
	New class hier based on the standard classes (i.e. CORBA:IORObject).

	* idef-write.lisp:
	Dispatch on the CORBA: classes, not on the local-ifr classes.

	* idef-read.lisp: Unbouned strings should use PrimitiveDef.

	* clorb-unmarshal.lisp:
	Fixed macro. Use IOP package for service context.

	* clorb-typecode.lisp: Some support for generated code.

	* clorb-supp.lisp:
	New fun ensure-corba-package to be used in generated code.

	* clorb-poa.lisp: Make iiop-profiles for generated objrefs.

	* clorb-orb.lisp: Added default initial reference.

	* clorb-object.lisp: Removed opdef from CORBA:Request.

	* clorb-marshal.lisp: Fixed objref marshalling to use iiop-profiles.

	* clorb-macros.lisp: CORBA-class setters will call slot-updated gf.

	* clorb-files.lisp:
	Changed files. New fun to generate a package declaration from existing package.

	* dii-example.lisp, dsi-example.lisp: package change

	* test-suite.lisp:
	Added debugging flag. Test suits can now have a variables section with
	variables bound in every test case. Added a result object that allows
	for aggregating several test suites.

2002-05-24  Lennart Staflin  <lenst@lysator.liu.se>

	* test-suite.lisp (:clorb): added debugging flag. Test suits can
	now have a variables section with variables bound in every test
	case. Added a result object that allows for aggregating several
	test suites.

2002-03-21  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-unmarshal.lisp (iiop-profile): new struct
	(unmarshal-iiop-profile-body): return struct, don't modify proxy obj
	(unmarshal-ior): decode all IIOP profiles and store in profiles
	field, defer selection of profile until object is "connected".

	* clorb-iiop.lisp (get-object-connection): new 
	(connect-object): new
	(request-send): use get-object-connection

	* clorb-orb.lisp (string-to-object): changed to accept "corbaloc"
	and "file" URLs. Several helper functions added.

	* clorb-srv.lisp (initialize-poa): new for the new ORB
	initialization mechanism.

	* clorb-options.lisp (*name-service*, *interface-repository*): use
	file:// urls as default.

	* clorb-object.lisp (CORBA:Proxy): added field raw-profiles,
	stores the raw encapsulations for the profiles (used to be
	profiles). The profiles field now stores decoded IIOP profiles.
	New field connection stores the connection object after it has
	been assigned.
	(object-narrow): copy raw-profiles

2002-03-20  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-orb.lisp (*default-initial-references*): remove
	(*orb-initializers*): new variable, list of functions to run when
	initializing the orb.

	* clorb-util.lisp (ns-name*): changed name from ns-name
	(ns-name): changed name from ns-name1
	(ns-name): namestring syntax now follows the CosNaming Stringified
	Names syntax. That is "/" separates components and "." separates
	id and kind.

2001-07-09  Lennart Staflin  <lenst@lysator.liu.se>

	* local-ir.lisp (operation-description): include exception
	descriptions not exceptiondef objects.

2001-07-06  Lennart Staflin  <lenst@lysator.liu.se>

	* dumpir.lisp (dump-ir): use with-standard-io-syntax

2001-07-02  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-srvreq.lisp: modified for new IO-system

	* clorb-srv.lisp: Old adaptor class and methods removed. Support
	for new IO-system.

	* clorb-servant.lisp: remove marshal-ior method

	* clorb-orb.lisp: moved orb-wait to clorb-iiop. Removed the
	adaptor generics.

	* clorb-macros.lisp (define-operation): new
	(define-deferred): new

	* clorb-trie.lisp (trie-get): fix type declaration

	* clorb-object.lisp (request-funcall): request-invoke renamed to
	request-funcall 
	(CORBA:NamedValue): moved here
	(CORBA:Request): moved here

	* clorb-iiop.lisp: New file. Connection handling, IIOP
	request/response handling. IO event handling (orb-wait).

	* clorb-client.lisp: all code moved to clorb-iiop

	* clorb-any.lisp (any-value): add CORBA:struct, move CORBA:Object

2001-07-01  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-request.lisp: Move to clorb-object

	* clorb-object.lisp (CORBA:Request): Add connection slot

2001-06-29  Lennart Staflin  <lennarts@manamind.no>

	* clorb-marshal.lisp (marshal-ior): rewrite as a ordinary defun

	* clorb-poa.lisp (object-key-id): remove

2001-06-23  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-request.lisp (add_out_arg): OMGBUG
	has name, how does this differ from add_named_out_arg

2001-06-21  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-orb.lisp (string-to-object): removed orb from name and arglist
	(object-to-string): removed orb from name and arglist

2001-06-14  Lennart Staflin  <lenst@lysator.liu.se>

	* socket.lisp (wait-for-input-on-streams): put in the sleep in the
	new clisp/mcl code

2001-06-13  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-iir.lisp: removed some debugging code

	* clorb-struct.lisp (*specialized-structs*): now a defvar

	* clorb-orb.lisp (orb-wait): put the fallback handling in here

	* clorb-srv.lisp (handle-socket): take flag if blocking allowed
	(removed the srv-.. version of this)
	removed the adaptor-fallback, moved handling to orb-wait
	
	* socket.lisp (wait-for-input-on-streams): added support for clisp
	(and untested for mcl)
	(socket-stream-functional-p): clisp: detect eof also
	(socket-stream-listen): clisp: use read-byte-lookahed

2001-06-04  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-util.lisp (ns-name1): new syntax for name service names as
	string: <id1>&<kind1>;<id2>&<kind2>;..;<idn>&<kindn>. Where
	'&<kind>' is optional and '&&' stands for a singel '&' in the name.

2001-05-17  Lennart Staflin  <lenst@lysator.liu.se>

	* idef-read.lisp (idef-read-part): added support for
	define-constant syntax

2001-05-15  Lennart Staflin  <lenst@lysator.liu.se>

	* idef-read.lisp (parse-type-in): added support for (string n) and
	(wstring n) type specifications.

	* local-ir.lisp (wstring-def): new class

2001-02-13  Lennart Staflin  <lenst@lysator.liu.se>

	* local-ir.lisp (addto): addto now returns the object added.
	(create_constant): new
	(create_exception): new
	(create_union): new
	(create_enum): new
	(create_alias): new
	(create_interface): new
	(constant-def): new class
	(find-opinfo): new
	(create_attribute): new
	(create_operation): new

	* clorb-srvreq.lisp (set-request-result): Moved here.

	* clorb-servant.lisp (servant-invoke): use new "opinfo" triple
	instead of old opdef. This to better handle getters and setters.

	* clorb-iir.lisp (opdef-from-attrdef): include setter also

	* clorb-exceptions.lisp (report-systemexception): Removed
	conditional format string

2001-02-13  Lennart Staflin  <lennarts@infostream.no>

	* clorb-macros.lisp (define-method): fix test for docstring

	* clorb-iir.lisp (is_a): method on interface to support mixing the
	iir and local-ir objects.

2000-08-03  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-pkgdcl.lisp ("OMG.ORG/PORTABLESERVER"): fixed name case.

2000-07-21  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-poa.lisp: Added standard interface for Current object.
 	
2000-06-25  Lennart Staflin  <lenst@lysator.liu.se>

	* socket.lisp: new func.
	Added some logging. 

	* clorb-srv.lisp: Moved some stuff to socket.lisp
	
2000-06-25  lenst  <lenst@pc-lennarts>
 
 	* socket.lisp: Added socket accepting code for CMUCL.
	Only blocking version though.

	* local-ir.lisp: Oops. Need absolute_name as initarg for contained.
	
	* clorb-srv.lisp, clorb-srvreq.lisp:
	Remove double colon in format string

2000-06-25  Lennart Staflin  <lenst@t2>

	* clorb-marshal.lisp: Fixs signed/unsigned type declarations.

	* clorb-exceptions.lisp: Change accessor to reader for conditions

	* clorb-options.lisp: Added docstrings

	* test-suite.lisp, test-suit.lisp: rename test-suit to test-suite

	* ec-server.lisp, ns-server.lisp: Update for new interface

	* clorb-sysdcl.lisp, clorb.system: New files..

	* code-gen.lisp: Getting there...

	* test-marshal.lisp: Move macro to own file

	* local-ir.lisp: Getting there ...

	* idef-macros.lisp:
	Removed old macrology for creating interface definitions.
	New macro idef-definitions uses the idef-read function.

	* hello-client.lisp, hello-dynserver.lisp, hello-idl.lisp,
	hello-server.lisp: 
	Some fixes to the Hello World example

	* clorb-unmarshal.lisp:
	When unmarshaling IORs, save all profiles and used specialized proxy
	class if one has been registered.

	* clorb-trie.lisp, clorb-struct.lisp:
	Let ParameterDescription compute type code from TypeDef if type code
	not set.

	* clorb-exceptions.lisp:
	Added :slots keyword arg to define-user-exception

	* clorb-orb.lisp, clorb-srv.lisp, socket.lisp:
	Changed the way sockets and streams are handled. Too avoid blocking on
	reading from an uninteresting socket if the implementation don't
	support all the functions we need.

	* clorb-objkey.lisp:
	Added  oid-to-string (oid),  string-to-oid (string)
	from lisp mapping.
	Also support new object-key format for persistent IOR. New magic
	numbers (all start with ascii codes for C and L, various cases :).

	* clorb-macros.lisp: Remove :id parameter from define-class macro.

	* clorb-util.lisp, clorb-poa.lisp, clorb-servant.lisp, clorb-srvreq.lisp, clorb-iir.lisp, clorb-object.lisp, clorb-request.lisp:
	Interface changes for Lisp mapping

	* clorb-buffer.lisp: Removed unused function

2000-06-14  Lennart Staflin  <lenst@t2>

	* ec-server.lisp: Separate server and client test case

	* ns-server.lisp:
	Use poa-current to find the POA, not servant-default-POA.

	* ns-server.lisp: * ns-server.lisp: use new define-servant.

	* local-ir.lisp: use auto-servant as base not servant. Support for
	using interface-def and operation-def instances in auto-servant
	implementation: methods for find-opdef, opdef-inparam-typecodes,
	opdef-outparam-typecodes.

	* idef-macros.lisp (define-servant): new macro that creates an
	auto-servant class for an interface that can be used almos as a
	skeleton class generated by an IDL-compiler.

	* ec-server.lisp: use new define-servant and remove the multiple
	interface hack.

	* clorb-srvreq.lisp: started writing support for the standard
	interface to ServerRequest.

	* clorb-servant.lisp: Major interface changes bring it closer to
	the spec.
	DynamicImplementation: new class for DSI.
	op:_default_POA: method on servant as standard
	class auto-servant: implements old servant behaviour.

	* clorb-request.lisp: Change struct clorb::named-value into class
	CORBA:NamedValue

	* clorb-poamgr.lisp: Change operations on POAManager to be in the
	op: package.

	* clorb-poa.lisp: change old struct clorb::poa to class
	PortableServer:POA with some changes of slot names and accessors
	to be standard.

	* clorb-opdef.lisp: made methods opdef-outparam-typecodes and
	opdef-inparam-typecodes to allow different opdef implementations
	to be used in servants.

	* clorb-iir.lisp: * clorb-iir.lisp: (find-opdef) made this a method

	* clorb-any.lisp: * clorb-any.lisp: make any-typecode setf-able.
	
	
2000-06-14  Lennart Staflin  <lennarts@infotek.no>

	* Installed patch from Eric Marsden "to make CLORB work on CLISP
	2000-03-06". (Client only)
	
	The main changes are to prefix certain functions with their
	package (eg read-byte-sequence), and adding &allow-other-keys to
	`initialize-instance' functions (otherwise CLISP seals the class
	and doesn't accept any keyword arguments to `make-instance'). I
	also changed `socket-connect' to specify the :element-type, and
	had to fiddle with the ugly ~_ format hack.

2000-06-14  Lennart Staflin  <lenst@lysator.liu.se>

	* ns-server.lisp: use new define-servant.
	Use poa-current to find the POA, not servant-default-POA.

	* local-ir.lisp: use auto-servant as base not servant. Support for
 	using interface-def and operation-def instances in auto-servant
 	implementation: methods for find-opdef, opdef-inparam-typecodes,
 	opdef-outparam-typecodes.
	
	* ec-server.lisp: use new define-servant and remove the multiple
	interface hack.

	* idef-macros.lisp (define-servant): new macro that creates an
	auto-servant class for an interface that can be used almos as a
	skeleton class generated by an IDL-compiler.

	* clorb-srvreq.lisp: started writing support for the standard
	interface to ServerRequest.

	* clorb-poamgr.lisp: Change operations on POAManager to be in the
	op: package.

	* clorb-poa.lisp: change old struct clorb::poa to class
	PortableServer:POA with some changes of slot names and accessors
	to be standard.

	* clorb-opdef.lisp: made methods opdef-outparam-typecodes and
	opdef-inparam-typecodes to allow different opdef implementations
	to be used in servants.

	* clorb-iir.lisp: (find-opdef) made this a method

	* clorb-request.lisp: Change struct clorb::named-value into class
	CORBA:NamedValue 

	* clorb-iir.lisp: 

	* clorb-any.lisp: make any-typecode setf-able.

	* clorb-servant.lisp: Major interface changes bring it closer to
	the spec. 
	DynamicImplementation: new class for DSI.
	op:_default_POA: method on servant as standard
	class auto-servant: implements old servant behaviour.

2000-06-13  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-servant.lisp: Rename servant-this to op:_this

2000-06-07  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-request.lisp: Some format to mess.

2000-05-23  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-poamgr.lisp: Use new macro to define user exception

	* clorb-pkgdcl.lisp:
	CLISP socket import, plus some more export for features

	* clorb-macros.lisp: Another attempt to deal with CLISP non ansi format

	* clorb-exceptions.lisp: new defmacro define-user-exception

2000-05-20  Lennart Staflin  <lennarts@infotek.no>

	* clorb-macros.lisp (define-method): Don't use package directly in
	generated code.

2000-05-18  Lennart Staflin  <lenst@lysator.liu.se>

       	* Installed patch from Daniel Barlow <dan@telent.net>
	Support for CMUCL:

	* clorb-util.lisp: ORBit fix.

	* clorb-srvreq.lisp: Robustify.

	* clorb.system, clorb-pkgdcl.lisp: Fixes for CMUCL.

	* socket.lisp: new file with socket functions.

	* clorb-orb.lisp: Use new socket functions.

	* clorb-iir.lisp: Some message changes.

	* clorb-sysdcl.lisp, clorb-srv.lisp, clorb-client.lisp:
	Use new socket functions.

2000-04-30  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-macros.lisp (clisp-clean-format-string): fixup format
	strings for CLISP, also a shadow format with a macro to call this
	function.

	* clorb-marshal.lisp (marshal-number): don't use compiler macro
	for clisp (does it support compiler macros?)

	* clorb-request.lisp (corba-get-next-respons): rewrite loop to be
	ansi compliant. Added orb as parameter.
	(request-get-response): loop rewrite.

2000-04-29  Lennart Staflin  <lenst@lysator.liu.se>

	* local-ir.lisp: remove lisp-symbol and package-for; this will
	have to be handled by the code generator

2000-04-26  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-servant.lisp: remove methods slot from servant

2000-03-18  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-any.lisp (any-typecode): New actual typecodes according to
	4.20.2.

2000-03-17  Lennart Staflin  <lenst@lysator.liu.se>

	* clorb-request.lisp (request-get-response): need to get client in
	every loop iteration to handle forwards correctly.

