;; clorb-idl

(in-package :clorb)

(defclass IDL-COMPILER () 
  ((include-directories :initform *default-include-directories*
                        :initarg :include-directories
                        :accessor include-directories)))


(defgeneric load-repository (idl-compiler repository file))

(defvar *default-idl-compiler* nil)

(defvar *default-exclude* '("::CORBA"))

(defun corba:idl (file &key print (eval t) output (package-decl t)
                         only (exclude *default-exclude*)
                         (skeleton t) target
                         (compiler *default-idl-compiler*)
                         (pprint-dispatch *target-pprint-dispatch*))
  (let ((repository (make-instance 'repository)))
    (load-repository compiler repository file)
    (flet ((lookup (name) (op:lookup repository name)))
      (let* ((target (make-instance (or target (if skeleton 'all-target 'static-stub-target))
                       :excludes (mapcar #'lookup exclude)))
             (code (if only
                     (make-progn (mapcar (lambda (name) (target-code (lookup name) target))
                                         (mklist only)))
                     (target-code repository target))))
        (flet ((execute-code ()
                 (unless (and (consp code) (eq (car code) 'progn))
                   (setq code `(progn code)))
                 (dolist (x (cdr code))
                   (when x
                     (when print (terpri) (pprint x))
                     (when eval (eval x))))
                 (when print (terpri))))
          (cond (output
                 (setq print t)
                 (with-standard-io-syntax
                   (let ((*package* (find-package :net.cddr.clorb))
                         (*print-pprint-dispatch* pprint-dispatch))
                     (with-open-file (*standard-output* output :direction :output
                                                        :if-exists :supersede)
                       (format t ";;;; Code generated by CLORB~%")
                       (pprint '(in-package :net.cddr.clorb))
                       (when package-decl
                         (pprint (target-ensure-packages target)))
                       (execute-code)))))
                (t
                 (let ((*print-pprint-dispatch* pprint-dispatch))
                   (execute-code)))))))
      (add-idl-repository *internal-interface-repository*
                          (truename file)
                          repository)
      repository))


#|
(CORBA:IDL "clorb:idl;interface-repository.idl" 
           :output "clorb:src;y-ifr-base.lisp" 
           :eval nil
           :exclude nil
           :skeleton nil )

(CORBA:IDL "clorb:idl;interface-repository.idl" 
           :output "clorb:src;y-ifr-base.lisp"
           :pprint-dispatch nil
           :eval nil
           :exclude nil
           :skeleton nil )

(CORBA:IDL "clorb:idl;CosNaming.idl" 
           :output "clorb:src;y-cosnaming-skel.lisp" 
           :package-decl t
           :eval nil
           :target 'servant-target )


|#
;;; clorb-idl.lisp ends here
